/*
 * Copyright (C) 2007-2020 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id "de.undercouch.download" version "3.4.3"
	id "base"
}

apply plugin: "groovy"
apply plugin: 'de.undercouch.download'

project.version = "3.2.0-SNAPSHOT" // craftercms version flag

apply from: "commons.gradle"
apply from: "modules.gradle"
apply from: "environments.gradle"
apply from: "downloads.gradle"
apply from: "deploy.gradle"
apply from: "run.gradle"

// Global Settings
def environments = getPropertySafelyWithDefaults("env", "all")
def overwriteArtifact = getPropertySafelyWithDefaults("refreshDownloads", "false").toBoolean()
def overwriteChangedFiles = getPropertySafelyWithDefaults("overrideConfig","true").toBoolean()
def refreshEnv = getPropertySafelyWithDefaults("refreshEnv", "false").toBoolean()
def downloadGrapes = getPropertySafelyWithDefaults("downloadGrapes", "false").toBoolean()
def socialRequired = getPropertySafelyWithDefaults("crafter.social", "false").toBoolean()
def profileRequired = (getPropertySafelyWithDefaults("crafter.profile", "false").toBoolean() || socialRequired)
def unitTest = getPropertySafelyWithDefaults("unitTest", "false").toBoolean()
def startMongoDB = getPropertySafelyWithDefaults("startMongodb", (profileRequired || socialRequired)).toBoolean()
def startElasticsearch = getPropertySafelyWithDefaults("withElasticsearch", "true").toBoolean()
def startCommand = project.hasProperty("debug")? "debug" : "start"
def stopCommand = "stop"
def statusCommand = "status"
def gitUrl = getPropertySafelyWithDefaults("gitUrl", "https://github.com/craftercms/")
def gitRemote = getPropertySafelyWithDefaults("gitRemote", "origin")
def shallowClone = getPropertySafelyWithDefaults("shallowClone", "false").toBoolean()
def gitBranch = "develop"  // craftercms branch flag
def bundlesDir = getPropertySafelyWithDefaults(bundlesDir, "./bundles")

task splash() {
	description 'Displays splash screen'
	doFirst {
		splash()
	}
}

task preFlightCheck() {
	description 'Checks dependencies'
	dependsOn = [ "splash" ]
	doFirst {
		if (JavaVersion.current() != project.targetCompatibility) {
    		throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
		}

		def command = "mvn -v"
		if (!command.execute()) {
			throw new GradleException("Maven ('mvn') not found, please make sure it is installed and accessible.")
		}

		command = "yarn -v"
		if (!command.execute()) {
			throw new GradleException("Yarn ('yarn') not found, please make sure it is installed and accessible.")
		}

		command = "lsof -v"
		if (!command.execute()) {
			throw new GradleException("'lsof' command not found, please make sure it is installed and accessible.")
		}
	}
}

task download() {
	description 'Downloads dependencies if required.'
	dependsOn = [ "preFlightCheck" ]
	doFirst {
		getDownloads().each { download ->
			downloadArtifact(
								download['name'],
								download['url'],
								download['destinationFile'],
								download['checksumAlgorithm'],
								overwriteArtifact,
								true /* verify artifact */,
								download['expand'].toBoolean(),
								download['expandFolder']
							)
		}
	}
}

task clone() {
	description 'Clones the modules if required.'
	dependsOn = [ "download" ]
	doFirst {
		getAllModules().each { module -> cloneModule(module, gitUrl, shallowClone, gitBranch, gitRemote) }
	}
}

task selfUpdate() {
	description 'Updates the Crafter CMS parent project.'
	dependsOn = [ "clone" ]
	doFirst {
		execCommand(["git", "pull", gitRemote, gitBranch], "${projectDir}")
	}
}

task update() {
	description 'Updates the modules.'
	dependsOn = [ "clone" ]
	doFirst {
		getAllModules().each { module -> updateModule(module, gitRemote, gitBranch) }
	}
}

clean() {
	description 'Cleans the modules.'
	mustRunAfter update
	dependsOn = [ "clone" ]
	doFirst {
		getBuildModules().each { module -> cleanModule(module) }
	}
}

build() {
	description 'Builds the modules and prepares the binaries for deployment.'
	mustRunAfter clean
	dependsOn = [ "clone" ]
	doFirst {
		getBuildModules().each { module -> buildModule(module, unitTest) }
	}
}

task buildBaseEnvs() {
	description 'Build base target environments.'
	dependsOn = [ "clone" ]
	doFirst {
		getEnvironments().each { environment ->
			prepareEnvironment(environment, refreshEnv, overwriteChangedFiles, downloadGrapes)
		}
	}
}

task deploy() {
	description 'Deploys the module artifacts prepares the authoring/delivery environments.'
	mustRunAfter build
	dependsOn = [ "buildBaseEnvs" ]
	doFirst {
		getEnvironments().each { environment ->
			deployEnvironment(environment, overwriteChangedFiles, profileRequired, socialRequired)
		}
	}
}

task upgrade() {
	description 'Upgrades all modules and redeploys them'
	dependsOn = [ "update", "clean", "build", "deploy" ]
}

task start() {
	description 'Starts Crafter CMS'
	doFirst {
		getEnvironments().each { environment ->
			def command = [ startCommand ]
			if (!startElasticsearch)
				command += ["skipElasticsearch"]
			if (startMongoDB)
				command += ["forceMongo"]
			runEnvironment(environment, command, profileRequired, socialRequired)
		}
	}
}

task stop() {
	description 'Stops Crafter CMS'
	doFirst {
		getEnvironments().each { environment ->
			def command = [ stopCommand ]
			if (!startElasticsearch)
				command += ["skipElasticsearch"]
			if (startMongoDB)
				command += ["forceMongo"]
			runEnvironment(environment, command, profileRequired, socialRequired)
		}
	}
}

task status() {
	description 'Reports Crafter CMS status'
	doFirst {
		getEnvironments().each { environment ->
			def command = [ statusCommand ]
			if (!startElasticsearch)
				command += ["skipElasticsearch"]
			if (startMongoDB)
				command += ["forceMongo"]
			runEnvironment(environment, command, profileRequired, socialRequired)
		}
	}
}

task bundle() {
	description 'Bundles the authoring/delivery environments into tarballs for distribution.'
	dependsOn = [ "deploy" ]
	doFirst {
		getEnvironments().each { environment ->
			bundleEnvironment(environment, bundlesDir)
		}
	}
}